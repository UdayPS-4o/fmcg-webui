<%- include('../../partials/top') %>


<div class="container-xxl flex-grow-1 container-p-y">
  <h4 class="fw-bold py-3 mb-4">
  </h4>

  <div class="row">
    <div class="col-md-12">

      <!-- Change Password -->
      <div class="card mb-4">
        <div class="card-body">
          <form autocomplete="off" action="/edit/godown" method="post">
            <div class="row">
              <div class="col-md-6">
                <div class="form-floating mb-3">
                  <input type="date" class="form-control" id="date" name="date" required>
                  <label for="date">Date</label>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-floating mb-3">
                  <input type="text" class="form-control" value="T" disabled id="series" name="series" required value="" min="1">
                  <label for="series">Series</label>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-floating mb-3">
                  <input type="text" class="form-control" id="IDD" value="<%- receipt.id %>" disabled id="#" name="#" required value="" min="1">
                  <label for="#">#</label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-floating mb-3">
                  <input type="text" class="form-control" id="from-godown" name="from-godown" placeholder="" required value="<%- receipt.fromGodown %>" min="1">
                  <label for="from-godown">From godown.</label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-floating mb-3">
                  <input type="text" class="form-control" id="to-godown" name="to-godown" placeholder="" required value="<%- receipt.toGodown %>" min="1">
                  <label for="to-godown">To godown.</label>
                </div>
              </div>
              <div class="col-md-12">
                <div class="accordion" id="itemContainer">



                </div>
              </div>
            </div>

            <br>
            <br>
            <br>
            <br>

            <button type="submit" class="btn btn-primary me-2" style="display: none;">Save changes</button>

          </form>
            <div class="col-12 mt-1" style="display: flex; justify-content: end;">
            <button type="button" class="btn btn-label-secondary" style="margin-right:20px">Cancel</button>
              <button type="button" class="btn btn-primary me-2" onclick="submit()">Save changes</button>
            </div>

          <script>
            // Set today's date as the default value for the date input
            document.addEventListener('DOMContentLoaded', (event) => {
              //  const today = new Date().toISOString().split('T')[0];
              // timezone india
              const today = new Date().toLocaleString('en-CA').split(',')[0];
              document.getElementById("date").value = today;

              const time = new Date().toLocaleString('en-CA').split(',')[1];
            });
          </script>


        </div>
      </div>
    </div>
    <!--/ Change Password -->




  </div>
</div>


<%- include('../../partials/bottom') %>

<script>
  let itemCounter = 0;
  let itemContainer = document.getElementById("itemContainer");
  let items = {};
  let global_usersList = [];
  let pmplJSON = [];
  let tagifyFrom, tagifyTo;
  let godownList = [];
  let STEP = 4;
  let STOCKS;
  let fromGodown;
  let toGodown;
  let itemsADDED=false;
  let itms = `<%- JSON.stringify(receipt.items) %>`;
    itms = JSON.parse(itms);

  (async () => {
    STOCKS = await calculateCurrentStock();
    const lastHASH = await fetch("/api/TRFLAST").then(res => res.text());
    // document.querySelector("#IDD").value = lastHASH;

    const url = "/api/dbf/pmpl.json";
    const response = await fetch(url);
    let json = await response.json();
    // FILTER -> .STK IS > 0
    // json = json.filter(item => item.STK > 0);
    pmplJSON = json;
    // for each object in json array, take out C_NAME as name and C_CODE as email
    let usersList = json.map(user => ({
      name: user.PRODUCT,
      title: user.PRODUCT,
      email: `${user.CODE} | ${user.MRP1}`,
      code: user.CODE,
      mrp: user.MRP1,
      value: user,
      avatar: "/assets/img/avatars/3.png"
    }));

    const resGodown = await fetch("/api/dbf/godown.json");
    const jsonGodown = await resGodown.json();

    const billDTL = await fetch("/api/dbf/billdtl.json");
    const jsonBill = await billDTL.json();

    const purdtl = await fetch("/api/dbf/purdtl.json")
    const jsonPur = await purdtl.json();


    
    



    godownList = jsonGodown.map(user => ({
      name: user.GDN_NAME,
      title: user.GDN_NAME,
      email: `${user.GDN_CODE}`,
      value: user.GDN_CODE,
      avatar: "/assets/img/avatars/3.png"
    }));

    usersList = usersList.filter(user => user.name && user.email);
    usersList = usersList.sort((a, b) => a.name.localeCompare(b.name));
    
    godownList = godownList.filter(user => user.name && user.email);

    global_usersList = usersList;
    
    console.log(godownList)
    godownList = godownList.map(user => ({
      ...user,
      element: "#from-godown"
    }));
    tagifyFrom = tagifyElement("#from-godown", godownList);
    tagifyTo   = tagifyElement("#to-godown", godownList);
    let timer = 0;    
    itms.forEach(item => {
      setTimeout(() => {
        addItem(item.code,item.unit,item.qty);
      }, timer+=100);
    });

    setTimeout(() => {
      itemsADDED = true;
      // addItem();
    }, 101*itms.length);
    
  })()

  
  

  function addItem(code="", unit="", qty="") {
    let usersList = JSON.parse(JSON.stringify(global_usersList));    
    itemCounter++;
    usersList = usersList.map(user => ({
      ...user,
      itemCounter
    }));
    fromGodown = document.getElementById("from-godown");
    fromGodown = JSON.parse(fromGodown.value)[0].value;
    // FOR EACH ITEM IF STOCKS -> GDN_CODE = 0 or not available delete it
    // usersList = usersList.filter(user => STOCKS[user.value.CODE] && STOCKS[user.value.CODE][fromGodown] && STOCKS[user.value.CODE][fromGodown] > 0);

    let item = document.createElement("div");
    // set the div to <div class="accordion-item" id="item${itemCounter}">
    item.classList.add("accordion-item");
    item.id = `item${itemCounter}`;

    item.innerHTML = `
      <h2 class="accordion-header" id="heading${itemCounter}"> 
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${itemCounter}" aria-expanded="true" aria-controls="collapse${itemCounter}">
        Add a new Item
      </button>
    </h2>
    <div id="collapse${itemCounter}" class="accordion-collapse collapse show" aria-labelledby="heading${itemCounter}" data-bs-parent="#accordionExample"> 
     <div class="accordion-body">
           <div class="row">
              <div class="col-md-4">
                 <div class="form-floating mb-3">
                    <input type="text" value="${code}" class="form-control" disabled id="item-name-${itemCounter}" name="item-name" placeholder="" >
                    <label for="item-name">Item Name</label>
                 </div>
              </div>
              
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <input type="text" class="form-control" disabled id="current-stock-${itemCounter}" name="current-stock" placeholder="" >
                <label for="current-stock">Stock</label>
              </div>
            </div>
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <input type="text" class="form-control" disabled id="pack-${itemCounter}" name="pack" placeholder="" >
                <label for="pack">Pack</label>
              </div>
            </div>
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <input type="text" class="form-control" disabled id="gst-${itemCounter}" name="gst" placeholder="" >
                <label for="gst">GST%</label>
              </div>
            </div>
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <select class="form-select"  value="${unit}" id="SELECTOR-${itemCounter}" onchange="qtyRules(${itemCounter})">
                </select>
                <label for="unit">Unit</label>
              </div>
            </div>
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <input type="text" class="form-control" disabled id="pc-bx-${itemCounter}" name="pc-bx" placeholder="" >
                <label for="pc-bx">Pc/Bx</label>
              </div>
            </div>
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <input type="text" class="form-control" disabled id="mrp-${itemCounter}" name="mrp" placeholder="" >
                <label for="mrp">M.R.P.</label>
              </div>
            </div>
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <input type="text" class="form-control" disabled id="rate-${itemCounter}" name="rate" placeholder="" >
                <label for="rate">Rate</label>
              </div>
            </div>
            <div class="col-md-2">
              <div class="form-floating mb-3">
                <input type="number" value="${qty}" class="form-control" id="qty-${itemCounter}" name="qty" placeholder="" step="1" min="1" pattern="^\d+$">
                <label for="qty">QTY</label>
              </div>
            </div>
           

           </div>
              
        </div>
  </div>
      `;

    itemContainer.appendChild(item);

    let tagITM = tagifyElement(`#item-name-${itemCounter}`, usersList);
    // make its value to the code
    tagsELM[`#item-name-${itemCounter}`].addTags([
      usersList.find(user => user.value.CODE == code)
    ]);
    onSelectSuggestion({
      detail: {
        data: usersList.find(user => user.value.CODE == code)
      }
    });

  }

  const tagsELM = {};

  function tagifyElement(tagSEL, usersList) {



    const TagifyUserListEl = document.querySelector(tagSEL);
    console.log("TAGGED",tagSEL);

    function tagTemplate(tagData) {
      return `
      <tag title="${tagData.title || tagData.email}"
      contenteditable='false'
      spellcheck='false'
      tabIndex="-1"
      class="${this.settings.classNames.tag} ${tagData.class ? tagData.class : ''}"
      ${this.getAttributes(tagData)}
      >
      <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>
      <div>
         <div class='tagify__tag__avatar-wrap'>
            <img onerror="this.style.visibility='hidden'" src="${tagData.avatar}">
         </div>
         <span class='tagify__tag-text'>${tagData.name}</span>
      </div>
      </tag>
      `;
    }

    function suggestionItemTemplate(tagData) {
      return `
      <div ${this.getAttributes(tagData)}
      class='tagify__dropdown__item align-items-center ${tagData.class ? tagData.class : ''}'
      tabindex="0"
      role="option"
      >
      ${tagData.avatar ?
               `<div class='tagify__dropdown__item__avatar-wrap'>
            <img onerror="this.style.visibility='hidden'" src="${tagData.avatar}">
         </div>`
               : ''
            }
      <strong>${tagData.name}</strong>
      <span>${tagData.email}</span>
      </div>
      `;
    }

    // initialize Tagify on the above input node reference
    let TagifyUserList = new Tagify(TagifyUserListEl, {
      // mode:"select",
      tagTextProp: "name", // very important since a custom template is used with this property as text. allows typing a "value" or a "name" to match input with whitelist
      enforceWhitelist: true,
      maxTags: 1,
      skipInvalid: true, // do not remporarily add invalid tags
      maxTags: 1,
      dropdown: {
        closeOnSelect: true,
        enabled: 0,
        classname: "users-list",
        searchKeys: ["name", "email"] // very important to set by which keys to search for suggesttions when typing
      },
      templates: {
        tag: tagTemplate,
        dropdownItem: suggestionItemTemplate
      },
      whitelist: usersList
    });

    TagifyUserList.on("dropdown:show dropdown:updated", onDropdownShow);
    TagifyUserList.on("dropdown:select", onSelectSuggestion);
    TagifyUserList.on("remove", onRemoveTag);
    let addAllSuggestionsEl;

    function onDropdownShow(e) {
      let dropdownContentEl = e.detail.tagify.DOM.dropdown.content;

      if (TagifyUserList.suggestedListItems.length > 1) {
        // addAllSuggestionsEl = getAddAllSuggestionsEl();

        // insert "addAllSuggestionsEl" as the first element in the suggestions list
        // dropdownContentEl.insertBefore(addAllSuggestionsEl, dropdownContentEl.firstChild);
      }
    }

    tagsELM[tagSEL] = TagifyUserList;

    function submit() {
      TagifyUserList.value.forEach(element => {
        changepassword(element.value);
      });
    }

    return TagifyUserList;
  }



  function onSelectSuggestion(e) {
    console.log('e',e);
    if (STEP > 2) {
      fromGodown = document.getElementById("from-godown");
      toGodown = document.getElementById("to-godown");
      fromGodown = JSON.parse(fromGodown.value)[0].value;
      toGodown = JSON.parse(toGodown.value)[0].value;
    }
    if(STEP < 3){
      let stp = STEP == 1 ? "from" : "to";
      setTimeout(() => {
        document.querySelector(`.tagify [element="#${stp}-godown"] x`).style.visibility = "hidden";
      }, 10);

      STEP++;

      if (STEP == 2) {
        
        godownList = godownList.map(user => ({
          ...user,
          element: "#to-godown"
        }));
        godownList = godownList.filter(user => user.value != e?.detail?.data?.value);
        tagifyTo   = tagifyElement("#to-godown", godownList);
      }
    
      if (STEP == 3) {
        addItem()
      }
    }

    if(!e?.detail?.data?.itemCounter) return; 
    const currentITM = e.detail.data.itemCounter;
    console.log("Item Selected", e.detail.data);
    items[currentITM] = e.detail.data;
    controlAccordion('collapse', currentITM-1);
    if(currentITM == e.detail.data.itemCounter){
      // Access the selected data
      const selectedData = e.detail.data.value;

      // Get references to the form elements
      const itemNameInput = document.getElementById(`item-name-${currentITM}`);
      const packInput     = document.getElementById(`pack-${currentITM}`);
      const gstInput      = document.getElementById(`gst-${currentITM}`);
      const pcBxInput     = document.getElementById(`pc-bx-${currentITM}`);
      const mrpInput      = document.getElementById(`mrp-${currentITM}`);
      const rateInput     = document.getElementById(`rate-${currentITM}`);
      const current_stock = document.getElementById(`current-stock-${currentITM}`);
      const selector      = document.getElementById(`SELECTOR-${currentITM}`);
      const qty           = document.getElementById(`qty-${currentITM}`);
      const heading       = document.querySelector(`#heading${currentITM} > button`);
      
      [packInput, gstInput, pcBxInput, mrpInput, rateInput, selector, qty].forEach(input => {
        input.setAttribute("required", true);
      });


      console.log(STOCKS[selectedData.CODE], e.detail.data.value, [fromGodown] )
      current_stock.value = STOCKS[selectedData.CODE] ? STOCKS[selectedData.CODE][fromGodown] : 0;
      itemNameInput.value = selectedData.PRODUCT;
      packInput.value = selectedData.PACK;
      gstInput.value = selectedData.GST;
      pcBxInput.value = selectedData.MULT_F; 
      mrpInput.value = selectedData.MRP1;
      rateInput.value = selectedData.PL_RATE;
      heading ? heading.innerText = selectedData.PRODUCT : '';
      console.log("currentITM", itemCounter, e.detail.data.itemCounter, itemCounter == e.detail.data.itemCounter)
      
      selector.innerHTML = `
        <option value="01">${selectedData.UNIT_1}</option>
        <option value="02">${selectedData.UNIT_2}</option>
      `;
      console.log(`
        <option value="01">${selectedData.UNIT_1}</option>
        <option value="02">${selectedData.UNIT_2}</option>
      `)

      qtyRules(currentITM);
      
      if(itemCounter == e.detail.data.itemCounter && itemsADDED){
        // addItem(); 
        // console.log("Item Added");
      }
    }
}

function qtyRules(i) {
  return;
  e = items[i].value;
  const qty = document.querySelector(`#qty-${i}`);
  const selector = document.querySelector(`#SELECTOR-${i}`);
  if(selector.value == "01"){
    qty.setAttribute("max", STOCKS[e.CODE][fromGodown]);
    console.log("max", STOCKS[e.CODE][fromGodown]);
  } else {
    qty.setAttribute("max", STOCKS[e.CODE][fromGodown] / e.MULT_F);
    console.log("max", STOCKS[e.CODE][fromGodown] / e.MULT_F);  
  }
}


  function onRemoveTag(e) {
    console.log(e?.detail?.data)
    if(!e?.detail?.data?.itemCounter) return;
    console.log("Item Removed", e.detail.data);
    const itemCounter = e.detail.data.itemCounter;
    delete items[itemCounter];
    // Get references to the form elements
      const packInput     = document.getElementById(`pack-${itemCounter}`);
      const gstInput      = document.getElementById(`gst-${itemCounter}`);
      const pcBxInput     = document.getElementById(`pc-bx-${itemCounter}`);
      const mrpInput      = document.getElementById(`mrp-${itemCounter}`);
      const rateInput     = document.getElementById(`rate-${itemCounter}`);
      const stockInput    = document.getElementById(`current-stock-${itemCounter}`);
      const selector      = document.getElementById(`SELECTOR-${itemCounter}`);
      const qty           = document.getElementById(`qty-${itemCounter}`);
      const heading       = document.querySelector(`#heading${itemCounter} > button`);
      
      [packInput, gstInput, pcBxInput, mrpInput, rateInput, selector, qty].forEach(input => {
        input.removeAttribute("required");
      });

      

      packInput.value     = "";
      gstInput.value      = "";
      pcBxInput.value     = "";
      mrpInput.value      = "";
      rateInput.value     = "";
      stockInput.value    = "";
      selector.innerHTML  = "";
      heading ? heading.innerText   = "Add a new Item" : '';

  }

  function controlAccordion(action, index) {
    return;
    // Using 1-based indexing for user-friendliness
    let collapseId = "#collapse" + index; 
    let collapseElement = $(collapseId);

    if (action === 'expand') {
      collapseElement.collapse('show');
    } else if (action === 'collapse') {
      collapseElement.collapse('hide');
      setTimeout(() => {
        // let currentScrollPosition = window.scrollY;
        // let newScrollPosition = currentScrollPosition + 100;
        // window.scrollTo(0, newScrollPosition);
      }, 100);
    } else {
      console.error('Invalid action:', action);
    }
  }


  async function calculateCurrentStock() {
  // Fetch the sales, purchases, and transfers data
  const salesResponse = await fetch("/api/dbf/billdtl.json");
  const salesData = await salesResponse.json();

  const purchaseResponse = await fetch("/api/dbf/purdtl.json");
  const purchaseData = await purchaseResponse.json();

  const transferResponse = await fetch("/api/dbf/transfer.json");
  const transferData = await transferResponse.json();

  // Fetch the local godown transfer data
  const localTransferResponse = await fetch("http://localhost/json/godown");
  const localTransferData = await localTransferResponse.json();

  // Initialize a dictionary to track the stock
  let stock = {};

  // Process purchases to increment stock
  purchaseData.forEach(purchase => {
    const { CODE: code, GDN_CODE: gdn_code, QTY: qty, MULT_F: multF, UNIT: unit } = purchase;
    const qtyInPieces = unit === "BOX" ? qty * multF : qty;

    if (!stock[code]) {
      stock[code] = {};
    }
    if (!stock[code][gdn_code]) {
      stock[code][gdn_code] = 0;
    }
    stock[code][gdn_code] += qtyInPieces;
  });

  // Process sales to decrement stock
  salesData.forEach(sale => {
    const { CODE: code, GDN_CODE: gdn_code, QTY: qty, MULT_F: multF, UNIT: unit } = sale;
    const qtyInPieces = unit === "BOX" ? qty * multF : qty;

    if (stock[code] && stock[code][gdn_code]) {
      stock[code][gdn_code] -= qtyInPieces;
    }
  });

  // Process DBF transfers
  transferData.forEach(transfer => {
    const { CODE: code, GDN_CODE: from_gdn, TRF_TO: to_gdn, QTY: qty, MULT_F: multF, UNIT: unit } = transfer;
    const qtyInPieces = unit === "BOX" ? qty * multF : qty;

    // Handle outgoing transfers
    if (stock[code] && stock[code][from_gdn]) {
      stock[code][from_gdn] -= Math.abs(qtyInPieces); // Ensure qty is subtracted
    }

    // Handle incoming transfers
    if (!stock[code]) {
      stock[code] = {};
    }
    if (!stock[code][to_gdn]) {
      stock[code][to_gdn] = 0;
    }
    stock[code][to_gdn] += Math.abs(qtyInPieces); // Ensure qty is added
  });

  // Process local godown transfers
  localTransferData.forEach(transfer => {
    const { fromGodown, toGodown, items } = transfer;
    items.forEach(item => {
      const { code, qty, unit } = item;
      const qtyInPieces = unit === "BOX" ? qty * multF : qty; // Assuming unit "BOX" needs multiplication, else use qty as is

      // Handle outgoing transfers
      if (stock[code] && stock[code][fromGodown]) {
        stock[code][fromGodown] -= Math.abs(qtyInPieces); // Ensure qty is subtracted
      }

      // Handle incoming transfers
      if (!stock[code]) {
        stock[code] = {};
      }
      if (!stock[code][toGodown]) {
        stock[code][toGodown] = 0;
      }
      stock[code][toGodown] += Math.abs(qtyInPieces); // Ensure qty is added
    });
  });

  return stock;
}

// calculateCurrentStock();






function submit() {
  const form = document.querySelector("form");
  if (!form.checkValidity()) {
    form.reportValidity();
    return;
  }

  const data = {
    date: document.querySelector('input[name="date"]').value,
    series: document.querySelector('input[name="series"]').value,
    fromGodown: fromGodown,
    toGodown: toGodown,
    id: document.querySelector("#IDD").value,
    items: Object.values(items).map(item => ({
      code: item.code,
      qty: document.querySelector(`#qty-${item.itemCounter}`).value,
      unit: document.querySelector(`#SELECTOR-${item.itemCounter}`).value
    }))
  };

  const postForm = document.createElement("form");
  postForm.method = "POST";
  postForm.action = "/edit/godown";

  Object.keys(data).forEach(key => {
    const input = document.createElement("input");
    input.type = "hidden";
    input.name = key;
    input.value = key === "items" ? JSON.stringify(data[key]) : data[key];
    postForm.appendChild(input);
  });

  document.body.appendChild(postForm);
  postForm.submit();
}




</script>


</body>

</html> 